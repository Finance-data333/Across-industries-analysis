import pandas as pd
import numpy as np
import torch
import joblib
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.compose import ColumnTransformer
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from pytorch_tabnet.tab_model import TabNetRegressor

# ========================
# 全局配置
# ========================
MIN_SAMPLES_PER_SECTOR = 50  # 行业最小样本阈值
REPORT_COLS = ['行业', '样本数', 'RMSE', 'MSE', 'MAE', 'R²', 'MAPE(%)', '中位数APE(%)']  # 新增中位数APE


# ========================
# 主流程
# ========================
def main():
    df = load_and_preprocess()
    valid_sectors = get_valid_sectors(df)
    sector_metrics = []

    for sector in valid_sectors:
        sector_df = df[df['sector'] == sector].copy()

        if len(sector_df) < MIN_SAMPLES_PER_SECTOR:
            print(f"跳过 {sector}: 样本不足 ({len(sector_df)})")
            continue

        print(f"\n{'=' * 40}\n处理行业: {sector} ({len(sector_df)} 样本)\n{'=' * 40}")

        # 行业专属特征工程
        X, y, preprocessor = sector_feature_engineering(sector_df)
        X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

        # 模型训练（禁用早停）
        model = train_tabnet(X_train, y_train, X_test, y_test)

        # 评估与保存
        metrics = evaluate_sector(model, X_test, y_test, sector, len(sector_df))
        sector_metrics.append(metrics)
        save_sector_pipeline(model, preprocessor, sector)

    # 生成行业报告
    generate_sector_report(pd.DataFrame(sector_metrics, columns=REPORT_COLS))


# ========================
# 数据预处理（保持原有逻辑）
# ========================
def load_and_preprocess():
    try:
        df = pd.read_excel('1.xlsx')
        print(f"数据加载成功. 样本量: {len(df):,}")
    except Exception as e:
        raise ValueError(f"文件加载失败: {e}")

    # 列名标准化
    df = df.rename(columns={
        'horizon (days)': 'holding_period',
        'expected_return (yearly)': 'expected_return'
    })

    # 移除非特征列
    df = df.drop(columns=['company', 'date_BUY_fix', 'date_SELL_fix'], errors='ignore')

    # 标签编码
    df['investment'] = LabelEncoder().fit_transform(df['investment'])

    # 收益计算
    df = calculate_returns(df)

    # 异常值处理
    df = filter_extreme_values(df)

    return df


def calculate_returns(df):
    valid_prices = (df['price_BUY'] > 1e-6) & (df['price_SELL'] > 1e-6)
    df = df[valid_prices].copy()

    df['log_return'] = np.log(df['price_SELL'] / df['price_BUY'])
    df['annualized_return'] = df['log_return'] * (365 / df['holding_period'].clip(lower=1))
    df['real_return'] = df['annualized_return'] - df['inflation']
    return df


def filter_extreme_values(df):
    lower, upper = df['real_return'].quantile([0.01, 0.99])
    print(f"收益过滤范围: [{lower:.4f}, {upper:.4f}]")
    return df[(df['real_return'] > lower) & (df['real_return'] < upper)]


# ========================
# 行业处理模块
# ========================
def get_valid_sectors(df):
    """获取有效行业"""
    sector_counts = df['sector'].value_counts()
    return sector_counts[sector_counts >= MIN_SAMPLES_PER_SECTOR].index.tolist()


def sector_feature_engineering(df):
    """行业特征工程"""
    numeric_features = [
        'PE_ratio', 'Volatility_Buy', 'ROE_ratio',
        'NetProfitMargin_ratio', 'current_ratio', 'PS_ratio',
        'investment', 'holding_period'
    ]

    preprocessor = ColumnTransformer([
        ('scaler', StandardScaler(), numeric_features)
    ])

    X = preprocessor.fit_transform(df).astype(np.float32)
    y = df['real_return'].values.astype(np.float32)

    return X, y, preprocessor


def train_tabnet(X_train, y_train, X_val, y_val):
    """禁用早停的模型训练"""
    tabnet = TabNetRegressor(
        n_d=32,
        n_a=32,
        n_steps=5,
        gamma=1.2,
        seed=42,
        optimizer_fn=torch.optim.Adam,
        optimizer_params=dict(lr=1e-2),
        mask_type='sparsemax',
    )

    tabnet.fit(
        X_train=X_train,
        y_train=y_train.reshape(-1, 1),
        eval_set=[(X_val, y_val.reshape(-1, 1))],
        max_epochs=100,  # 增加训练轮次
        batch_size=256,
        eval_metric=['rmse']
    )
    return tabnet


# ========================
# 评估模块（新增详细指标）
# ========================
def evaluate_sector(model, X_test, y_test, sector, n_samples):
    """行业评估指标"""
    y_pred = model.predict(X_test)

    # 核心指标计算
    mse = mean_squared_error(y_test, y_pred)
    rmse = np.sqrt(mse)
    mae = mean_absolute_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)

    # APE计算（新增中位数）
    epsilon = 1e-6
    ape_values = 100 * np.abs((y_test - y_pred) / (np.abs(y_test) + epsilon))
    mape = np.mean(ape_values)
    median_ape = np.median(ape_values)

    # 实时打印结果
    print("\n" + "=" * 60)
    print(f"{sector} 评估结果 (样本数: {n_samples})")
    print("-" * 60)
    print(f"{'RMSE':<15}{rmse:>15.4f}")
    print(f"{'MSE':<15}{mse:>15.4f}")
    print(f"{'MAE':<15}{mae:>15.4f}")
    print(f"{'R²':<15}{r2:>15.4f}")
    print(f"{'MAPE (%)':<15}{mape:>15.2f}")
    print(f"{'Median APE (%)':<15}{median_ape:>15.2f}")
    print("=" * 60 + "\n")

    return [sector, n_samples, rmse, mae, mse, r2, mape, median_ape]


# ========================
# 模型保存（优化路径处理）
# ========================
def save_sector_pipeline(model, preprocessor, sector):
    """安全保存模型"""
    safe_name = sector.replace("/", "_").replace(":", "-")  # 处理特殊字符
    save_dir = Path(f"sector_models/{safe_name}")
    save_dir.mkdir(parents=True, exist_ok=True)

    # 保存模型和预处理
    model.save_model(save_dir / f"{safe_name}_tabnet.zip")
    joblib.dump(preprocessor, save_dir / "preprocessor.pkl")
    print(f"模型已保存至: {save_dir}/")


# ========================
# 报告生成（增强可视化）
# ========================
def generate_sector_report(metrics_df):
    """生成多维度报告"""
    # Excel报告
    metrics_df.sort_values('RMSE').to_excel("行业性能报告.xlsx", index=False)

    # 控制台输出
    print("\n" + "=" * 80)
    print("行业性能汇总".center(78))
    print("=" * 80)
    print(f"{'行业':<20}{'样本':>6}{'RMSE':>8}{'MSE':>10}{'MAE':>8}{'R²':>6}{'MAPE(%)':>8}{'中位APE(%)':>10}")
    print("-" * 80)

    for _, row in metrics_df.sort_values('RMSE').iterrows():
        print(f"{row['行业'][:18]:<20}"
              f"{row['样本数']:>6}"
              f"{row['RMSE']:>8.4f}"
              f"{row['MSE']:>10.4f}"
              f"{row['MAE']:>8.4f}"
              f"{row['R²']:>6.3f}"
              f"{row['MAPE(%)']:>8.2f}"
              f"{row['中位数APE(%)']:>10.2f}")

    print("=" * 80)

    # 可视化展示
    plt.figure(figsize=(18, 6))
    metrics_df.set_index('行业').plot(
        y=['RMSE', 'MAE', 'MAPE(%)'],
        kind='barh',
        subplots=True,
        layout=(1, 3),
        sharex=False,
        legend=False
    )
    plt.suptitle("跨行业性能对比")
    plt.tight_layout()
    plt.savefig('行业指标对比.png')
    plt.show()


# ========================
# 执行入口
# ========================
if __name__ == "__main__":
    main()
